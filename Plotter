import numpy as np                # Matrise pakke
import pandas as pd               # Database pakke
import matplotlib.pyplot as plt   # Plottepakke
import strToFloat
import importData as id
import ConvertToPandas

########       Script for plotting data
## - Takes pickle name and variables to plot as input
## - Plots the specified x and y variables, with specified cycles (optional)

def plotter(pickle_name, x1, y1, cycles=-1):

    df = pd.read_pickle(pickle_name).astype(float)  # Reads pickle as float

    if (cycles==-1):        # If no cycles are defined, will plot all cycles
            last_cycle = df.tail(1)['cycle'].as_matrix().astype(int)
            cycles = range(0, last_cycle[0], 1)   # Creates list from 0 to last cycle, increment 1

    # Setting color scheme. This should be modified to distinguish different cells, different color schemes etc. Below is for sequential colors.
    # Choose color maps from: https://matplotlib.org/examples/color/colormaps_reference.html
    color_min = 100  # Minimum color (if zero, first color is almost white.
    color_max = 300  # Maximum color, 300 looks nice.
    color_nr = color_min  # Color for each plot (used in loop below)
    color_iter = int((color_max - color_min) / (len(cycles) - 1))  # If e.g. 3 cycles, want 300-100 = 200, 200/2=100 iteration.

    for i in range(0, len(cycles)):
        df_cycle_x = df[df['cycle'] == cycles[i]]   # Make new data frame for given cycle
        color = plt.cm.Blues(color_nr)              # Setting color for given cycle
        plt.scatter(df_cycle_x[x1], df_cycle_x[y1], s=2, c=color)  # s = size
        color_nr = color_nr + color_iter            # Next color or color gradient
    plt.show()

    return


#####    Script for testing function
##       Inputs:
#Location of data
pickle_name_1 = '/Users\hennika\OneDrive - NTNU\PhD\Results\Cycling\Ti2C_t02_01'

##      Desired variable
x1 = 'cap_incr'
y1 = 'potential'
cycles = [0, 1, 5, 10]

##      Outputs
# plotter(pickle_name_1, x1, y1)              # without optional argument 'cycles'
plotter(pickle_name_1, x1, y1, cycles)    # with optional argument 'cycles'
